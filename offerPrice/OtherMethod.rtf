{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
//\
//  OfferPriceView.swift\
//  iOSConsumerApp\
//\
//  Created by Vikas Salian on 10/24/19.\
//  Copyright \'a9 2019 MyGlamm. All rights reserved.\
//\
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b \cf0 import
\f0\b0  UIKit\
\

\f1\b @IBDesignable
\f0\b0 \

\f1\b class
\f0\b0  OfferPriceView : UIView\{\
    \
    \
    
\f1\b private
\f0\b0  
\f1\b var
\f0\b0  label = UILabel()\
    \
    
\f1\b var
\f0\b0  labelText = ""\{\
        
\f1\b didSet
\f0\b0  \{\
            label.text = labelText\
        \}\
    \}\
    \
    
\f1\b override
\f0\b0  
\f1\b class
\f0\b0  
\f1\b var
\f0\b0  layerClass: AnyClass\{\
        
\f1\b return
\f0\b0  CAShapeLayer.
\f1\b self
\f0\b0 \
    \}\
    \
    
\f1\b override
\f0\b0  
\f1\b init
\f0\b0 (frame: CGRect) \{\
        
\f1\b super
\f0\b0 .init(frame: CGRect.zero)\
        \
        setupLabel(text : labelText)\
    \}\
    \
    
\f1\b required
\f0\b0  
\f1\b init
\f0\b0 ?(coder aDecoder: NSCoder) \{\
        
\f1\b super
\f0\b0 .init(coder: aDecoder)\
        \
        setupLabel(text : labelText)\
    \}\
    \
    \
    \
    
\f1\b private
\f0\b0  
\f1\b func
\f0\b0  setupLabel(text : String)\{\
        \
        \
        shimmer()\
        \
        \
        label.text = ""\
        label.numberOfLines = 2\
        \
       // label.font = UIFont.mgDDinFont(type: .regular, size: 14)\
        \
        addSubview(label)\
        label.translatesAutoresizingMaskIntoConstraints = 
\f1\b false
\f0\b0 \
        NSLayoutConstraint(item: label,\
                           attribute: .leading,\
                           relatedBy: .equal,\
                           toItem: 
\f1\b self
\f0\b0 ,\
                           attribute: .leading, multiplier: 1,\
                           constant: 9).isActive = 
\f1\b true
\f0\b0 \
        NSLayoutConstraint(item: label,\
                           attribute: .trailing,\
                           relatedBy: .equal,\
                           toItem: 
\f1\b self
\f0\b0 ,\
                           attribute: .trailing, multiplier: 1,\
                           constant: -(9)).isActive = 
\f1\b true
\f0\b0 \
        \
        NSLayoutConstraint(item: label,\
                           attribute: .centerY,\
                           relatedBy: .equal,\
                           toItem: 
\f1\b self
\f0\b0 ,\
                           attribute: .centerY, multiplier: 1,\
                           constant: 0).isActive = 
\f1\b true
\f0\b0 \
        \
    \}\
    \
    \
    
\f1\b func
\f0\b0  masktoOfferPrice() \{\
        \
        \
       // backgroundColor = .blue\
        \
        
\f1\b let
\f0\b0  maskLayer = CAShapeLayer()\
        maskLayer.frame = bounds\
        // Create the frame for the circle.\
    //    let radius: CGFloat = 50.0\
        // Rectangle in which circle will be drawn\
     //   let rect = CGRect(x: 100, y: 100, width: 2 * radius, height: 2 * radius)\
     //   let circlePath = UIBezierPath(ovalIn: rect)\
        \
        \
        
\f1\b let
\f0\b0  myBezier = UIBezierPath()\
        \
        myBezier.move(to: CGPoint(x: 0, y: 0))\
        \
        myBezier.addLine(to: CGPoint(x: bounds.width, y: 0))\
        \
        //   myBezier.addQuadCurve(to: CGPoint(x: rect.width - 20,y: 15), controlPoint: CGPoint(x:rect.width - 15,y:20.5))\
        \
        \
        // myBezier.addQuadCurve(to: CGPoint(x: rect.width - 50,y: 0), controlPoint: CGPoint(x:rect.width - 35,y:0))\
        \
        //myBezier.addQuadCurve(to: CGPoint(x: rect.width - 80,y: 15), controlPoint: CGPoint(x:rect.width - 65,y:0))\
        \
        //myBezier.addQuadCurve(to: CGPoint(x: rect.width - 100,y: 20), controlPoint: CGPoint(x:rect.width - 85,y:20.5))\
        \
        \
        \
        myBezier.addLine(to: CGPoint(x:(bounds.width - (bounds.width * 0.15)),y: (bounds.height / 2) ))\
        \
        myBezier.addLine(to: CGPoint(x: bounds.width, y: bounds.height))\
        \
        myBezier.addLine(to: CGPoint(x: 0, y: bounds.height))\
        \
        \
        \
        \
        \
        \
//        // Create a path\
//        let path = UIBezierPath(rect: bounds)\
//        // Append additional path which will create a circle\
//        path.append(circlePath)\
        // Setup the fill rule to EvenOdd to properly mask the specified area and make a crater\
       // maskLayer.fillRule = kCAFillRuleEvenOdd\
        // Append the circle to the path so that it is subtracted.\
        maskLayer.path = myBezier.cgPath\
        // Mask our view with Blue background so that portion of red background is visible\
      //  layer.mask = maskLayer\
        \
        
\f1\b guard
\f0\b0  
\f1\b let
\f0\b0  shapeLayer = 
\f1\b self
\f0\b0 .layer 
\f1\b as
\f0\b0 ? CAShapeLayer 
\f1\b else
\f0\b0  \{ 
\f1\b return
\f0\b0  \}\
        \
        //self.layer = maskLayer\
       \
        shapeLayer.path = myBezier.cgPath\
        \
        //shapeLayer.mask = shapeLayer\
        \
        shapeLayer.fillColor = UIColor.red.cgColor\
    \}\
    \
    
\f1\b func
\f0\b0  shimmer()\{\
        \
        \
//                let defaultView = UIView()\
//                defaultView.frame = CGRect(x: 0, y: 0, width: frame.width , height: frame.height)\
//                defaultView.backgroundColor = #colorLiteral(red: 0.9019607843, green: 0.3764705882, blue: 0.3764705882, alpha: 1).withAlphaComponent(1)\
\
                
\f1\b let
\f0\b0  shinyView = UIView()\
                shinyView.frame = CGRect(x: 0, y: 0, width: frame.width, height: frame.height)\
                    shinyView.backgroundColor =  colorLiteral(red: 1, green: 1, blue: 1, alpha: 1).withAlphaComponent(0.3)\
                \
//                addSubview(defaultView)\
                addSubview(shinyView)\
                \
                
\f1\b let
\f0\b0  gradientLayer = CAGradientLayer()\
                gradientLayer.colors = [\
                    UIColor.clear.cgColor, UIColor.clear.cgColor,\
                    UIColor.white.cgColor, UIColor.white.cgColor,\
                    UIColor.clear.cgColor, UIColor.clear.cgColor\
                ]\
                \
                gradientLayer.locations = [0, 0.2, 0.55, 0.6, 0.8, 1]\
                \
                //gradientLayer.locations = [0,0.5, 1]\
                gradientLayer.frame = shinyView.frame\
                \
                
\f1\b let
\f0\b0  angle = 70 * CGFloat.pi / 180\
                gradientLayer.transform = CATransform3DMakeRotation(angle, 0, 0, 1)\
                \
                shinyView.layer.mask = gradientLayer\
                \
                gradientLayer.transform = CATransform3DConcat(gradientLayer.transform, CATransform3DMakeScale(2, 2, 0))\
                \
                
\f1\b let
\f0\b0  animation = CABasicAnimation(keyPath: "transform.translation.x")\
                animation.fromValue = -1.5 * frame.width\
                animation.toValue = 1.5 * frame.width\
                animation.repeatCount = Float.infinity\
                animation.duration = 2\
                \
                gradientLayer.add(animation, forKey: "animation")\
                \
                \
                masktoOfferPrice()\
                \
                \
    \}\
    \
    \
    \
    
\f1\b override
\f0\b0  
\f1\b func
\f0\b0  draw(
\f1\b _
\f0\b0  rect: CGRect) \{\
       \
        \
//        //  let y:CGFloat = 20\
//\
//        let myBezier = UIBezierPath()\
//\
//        myBezier.move(to: CGPoint(x: 0, y: 0))\
//\
//        myBezier.addLine(to: CGPoint(x: rect.width, y: 0))\
//\
//        //   myBezier.addQuadCurve(to: CGPoint(x: rect.width - 20,y: 15), controlPoint: CGPoint(x:rect.width - 15,y:20.5))\
//\
//\
//        // myBezier.addQuadCurve(to: CGPoint(x: rect.width - 50,y: 0), controlPoint: CGPoint(x:rect.width - 35,y:0))\
//\
//        //myBezier.addQuadCurve(to: CGPoint(x: rect.width - 80,y: 15), controlPoint: CGPoint(x:rect.width - 65,y:0))\
//\
//        //myBezier.addQuadCurve(to: CGPoint(x: rect.width - 100,y: 20), controlPoint: CGPoint(x:rect.width - 85,y:20.5))\
//\
//\
//\
//        myBezier.addLine(to: CGPoint(x:(rect.width - (rect.width * 0.15)),y: (rect.height / 2) ))\
//\
//        myBezier.addLine(to: CGPoint(x: rect.width, y: rect.height))\
//\
//        myBezier.addLine(to: CGPoint(x: 0, y: rect.height))\
//\
//        myBezier.close()\
//\
//        let context = UIGraphicsGetCurrentContext()\
//        context!.setLineWidth(4.0)\
//        #colorLiteral(red: 0.9019607843, green: 0.3764705882, blue: 0.3764705882, alpha: 1).setFill()\
//\
//\
//        myBezier.fill()\
        \
        \
        \
        \
    \}\
    \
    \
\}\
}